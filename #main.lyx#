#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\begin_preamble








\title{Smarter Merge Tool for Structured Java Code }
\author{Kartik Andalam, Raoul D'Cunha, Shreya Shah }
\date{March 2014}
\end_preamble
\use_default_options false
\maintain_unincluded_children false
\language english
\language_package none
\inputencoding utf8
\fontencoding default
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize 11
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 0
\use_mathdots 0
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 2
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
maketitle
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

%
\backslash
twocolumn
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Section
Abstract
\end_layout

\begin_layout Standard
Software merging is a necessity for large-scale software development and
 while there are many code version systems to help with this, many of them
 don't take the structure of the code into account.
 We propose to develop a merge tool that will utilise the PDStore
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
PDStore is a Triplestore database developed at the University of Auckland
\end_layout

\end_inset

 database to maintain and analyse the structure of the data.
\begin_inset Newline newline
\end_inset

 The aim of the tool is to utilise information related to the structure
 of a file stored in PDStore and highlight the conflicts that arise in merging.
 The proposal highlights the requirements, milestones and possible evaluation
 methods for the research project.
\end_layout

\begin_layout Section
Motivation
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

%Today's code version systems are based on textual comparisons.
 Being
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

%textual based means that they do not understand the structure of the
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

%code, and as a result the tools are unable to fully assist the developer
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

%with code merging.
 This gave a reason to utilise the extra information
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

%that can aid in the merging.
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Developing a merge tool that maintains information in a structured form,
 gives scope to improve the way that conflicts and changes are showed.
 This motivated us to explore the effectiveness and usability of such merge
 tools and how they compare to existing merge tools.
\end_layout

\begin_layout Section
Related Work
\end_layout

\begin_layout Standard
\begin_inset CommandInset citation
LatexCommand cite
key "CodeClones"

\end_inset

 proposes a novel method for merging code clones and presents a successful
 case study conducted by using the Aries tool which uses to identify code
 clones and merge them.
 The method described in 
\begin_inset CommandInset citation
LatexCommand cite
key "CodeClones"

\end_inset

 consists of a two phase process, where code clones that can be refactored
 are quickly detected, and the metrics are measured which indicate how the
 detected code clones should be merged.
\end_layout

\begin_layout Standard
\begin_inset CommandInset citation
LatexCommand cite
key "SemanticDiff"

\end_inset

 describes a tool called “Semantic diff” and techniques used in that tool
 to show the effect of modifications.
 The tool aims at providing the user with a summarised report of semantic
 changes between two versions of a procedure, and focuses on minimising
 any spurious differences such as, renaming local variables.
 While the tool provides knowledge of variable dependences within a procedure,
 it is not very helpful when considering an entire program because the tool
 does not maintain any relationship between method invocation and method
 definition.
\end_layout

\begin_layout Standard
In 
\begin_inset CommandInset citation
LatexCommand cite
key "XMLMerge"

\end_inset

 a technique for performing a 3 way structured XML merge is described.
 The technique involves defining merge rules derived from common use cases
 of XML editing.
 While there are similar problems, a few differences exist.
 By the nature of XML, the local structure is important.
 However with Java code the structure can vary and still present the same
 semantic definition.
 Thus some of the rules made in 
\begin_inset CommandInset citation
LatexCommand cite
key "XMLMerge"

\end_inset

 become invalid for flexible structured data such as code.
\end_layout

\begin_layout Standard
\begin_inset CommandInset citation
LatexCommand cite
key "mergegraph"

\end_inset

 describes the problems associated with common textual based merging.
 It proposes a solution that can be applied to software artefacts of different
 types.
 The solution involves representing information with extra information such
 as namespaces appended with UIDs.
 Once the data is represented in this special structure, the job of analysing
 two structures should be made easier.
\end_layout

\begin_layout Section
Requirements
\end_layout

\begin_layout Standard
A successful execution of the research endeavour should meet the following
 requirements: 
\end_layout

\begin_layout Enumerate
To be able to successfully identify simple changes in method body but not
 necessarily code structure 
\end_layout

\begin_layout Enumerate
To be able to successfully identify and common sections of code in two structure
s with slight variations 
\end_layout

\begin_layout Enumerate
Identify changes in structure, such as method location being shifted 
\end_layout

\begin_layout Enumerate
Successfully merge two differing versions of code following from the examples
 in 1 and 2 
\end_layout

\begin_layout Standard
The following optional requirements would also be attempted to met during
 the execution of this research endeavour 
\end_layout

\begin_layout Enumerate
To integrate this additional functionality into the existing PDStore versioning
 application.
 
\end_layout

\begin_layout Section
Design and Implementation
\end_layout

\begin_layout Standard
The underlying technology used in the proposed method involves using PDStore
 to be able to form a structured view of the code.
 The merging logic will be written in Scala, while the GUI will be designed
 in Swing.
\end_layout

\begin_layout Standard
Shown below is an example that illustrates a possible GUI for three way
 merge involving PD Tree Views.
 The title string belonging to the LOTR book in the My book library database
 has differing values in each of the three existing versions(Base, Version
 A and Version B).
 We hope to colour code information such as modified items and or items
 in conflict to help better inform the user of the types of changes.
 The user can select items from different versions to be included in the
 merged representation by clicking on the checkbox beside the items
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename Diagram v2.png
	scale 44
	rotateOrigin rightTop

\end_inset


\begin_inset Caption

\begin_layout Plain Layout
Identification of changes and merged result
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Evaluation
\end_layout

\begin_layout Standard
This evaluation will consist of an usability testing and comparative analysis
 with existing merge tools.
\end_layout

\begin_layout Standard
As part of the usability testing, paper prototypes will be used to evaluate
 the feasibility of the design of the User Interface of our tool.
 This study will reveal both fundamental and minor flaws in the UI that
 would need to be fixed before the final milestone.
 Specific scenarios will be constructed outlining various use cases that
 will then be run through by the participants on multiple different UI designs.
 The participants will be asked to think out loud, so that their thought
 process can be observed and evaluated.
 Feedback will then be collected from the participants at the end through
 the use of a questionnaire which will then be used to measure the usefulness
 of each design.
\end_layout

\begin_layout Standard
Any identified flaws will then be corrected and the test will then be undertaken
 again so as to verify that the flaws are indeed fixed.
\end_layout

\begin_layout Standard
The comparative analysis will consist of test cases outlining major scenarios
 will be laid out at the start of the project and will later be run against
 existing merge tools and our developed merge tool.
 The outcome of these test scenarios will help determine the effectiveness
 of the tools under different scenarios
\end_layout

\begin_layout Section
Project Plan
\end_layout

\begin_layout Standard
Listed below are the three milestones for this project 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

%
\backslash
newline adding a new line puts too much space over here
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Description
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

Milestone One:
\end_layout

\end_inset

 Successfully identify the type of simple structural changes
\end_layout

\begin_deeper
\begin_layout Standard
This involves defining rules and defining a notion of “sameness” for two
 code artefacts.
 The PDStore database will be used to compare the two different versions
 of the code.
 Completion criteria involves being able to generate output that clearly
 identify the changes.
 
\begin_inset Newline newline
\end_inset

 
\series bold
Due Date:
\series default
 15th April 2014
\end_layout

\end_deeper
\begin_layout Description
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

Milestone Two:
\end_layout

\end_inset

 Perform merging of simple structural changes
\end_layout

\begin_deeper
\begin_layout Standard
After being able to identify the changes, we need to define appropriate
 rules for merging.
 To complete the milestone, the merger will be required to successfully
 merge files for a few defined scenarios.
 
\begin_inset Newline newline
\end_inset

 
\series bold
Due Date:
\series default
 30th April 2014
\end_layout

\end_deeper
\begin_layout Description
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

Milestone Three:
\end_layout

\end_inset

 Integrate the added functionality to existing PDStore based versioning
 tool
\begin_inset space ~
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
Integrating the added functionality will allow us to conduct our evaluation
 on users.
 This will be key in determining the usefulness and effectiveness of the
 changes.
\begin_inset Newline newline
\end_inset

 
\series bold
Due Date:
\series default
 12th May 2014
\end_layout

\end_deeper
\begin_layout Standard
 
\begin_inset CommandInset bibtex
LatexCommand bibtex
bibfiles "myBib"
options "plain"

\end_inset


\end_layout

\end_body
\end_document
